# -*- coding: utf-8 -*-
"""week_3_lesson_3b.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qVWf-tbn251ZGPEMiHjGWwflaare3GCL

# Langchain's Biult-In Persistence

**File based storage**
"""

from langchain.memory import ConversationBufferMemory
from langchain.memory.chat_message_histories import FileChatMessageHistory

# Save to a file specific to this user/session
memory = ConversationBufferMemory(
    chat_memory=FileChatMessageHistory("chat_history_user123.json"),
    return_messages=True
)

conversation = ConversationChain(llm=llm, memory=memory)
response = conversation.predict(input="What are VAEs?")

"""**SQLite Storage**"""

from langchain.memory import ConversationBUfferMemory
from langchain.memory.chat_message_histories import SQLChatMessageHistory

# Save to SQLite database
memory = ConversationBufferMemory(
    chat_memory=SQLChatMessageHistory(
        session_id="user123_session456",
        connection_string="sqlite:///chat_history.db"
    ),
    return_messages=True
)

conversation = ConversationChain(llm=llm, memory=memory)

"""# Custom Database Persistence"""

import json
from datetime import datetime

class DatabaseChatMemory:
  def __init__(self, user_id, session_id, db_connection):
    self.user_id = user_id
    self.session_id = session_id
    self.db = db_connection

  def save_message(self, role: str, content: str):
    """Save a single message (including system prompt) to the database."""
    self.db.execute(
        """
        INSERT INTO chat_messages (user_id, session_id, role, content, timestamp)
        VALUES (%s, %s, %s, %s, %s)
        """, (self.user_id, self.session_id, role, content, datetime.now())
    )

  def load_conversation(self) -> list:
    """Load the full conversation (including system prompt) in order"""
    result = self.db.execute(
        """
        SELECT role, content FROM chat_messages
        WHERE user_id = %s AND session_id = %s
        ORDER BY timestamp ASC
        """, (self.user_id, self.session_id)
    )
    return [{"role": row[0], "content": row[1]} for row in result]

