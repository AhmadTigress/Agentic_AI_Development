# -*- coding: utf-8 -*-
"""week_5_lesson_2a.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kIK9FOkUA3IDcu1tQM5t9KF8nKSI2IN8
"""

#!pip install -q langgraph
#!pip install -q pyjokes
print("LangGraph Installed!")
print("Pyjokes installed!")

"""## 1. Define the State"""

import operator
import pyjokes
from pydantic import BaseModel
from typing import Annotated, List, Literal
from pyjokes import get_joke

class Joke(BaseModel):
  text: str
  category: str

class JokeState(BaseModel):
  "what the bot should remember"

  jokes: Annotated[List[Joke], operator.add] = []
  jokes_choice: Literal["n", "c", "r","l", "q"] = "n"   # next joke, change category, reset, or quit
  category:str = "neutral"
  language:str = "en"
  quit: bool = False
  past_jokes: List[Joke] = []  # To track history

"""## Utilities"""

def get_user_input(prompt: str) -> str:
  return input(prompt).strip().lower()


def print_joke(joke: Joke):
  "Print a joke with nice formatting"
  print(f"\n CATEGORY: {joke.category.upper()}\n")
  print(f"\n {joke.text} \n")
  print("=" * 60)


def print_menu(category: str, total_jokes: int):
  "Print a compact menu header"
  print(f" Menu | Category: {category.upper()} | Jokes: {total_jokes}")
  print("-" * 50)


def print_category_menu():
  "Print nicely formatted category selection menu"
  print("#" + "=" * 55 + "#")
  print("  CATEGORY SELECTION")
  print("=" * 60)

"""## 2. Write Your Node Functions"""

def show_menu(state: JokeState) -> dict:
  "Displays the menu and gets user input"

  user_input = input("[n] Next [c] Category [l] Change Language [r] Reset Joke History [q] Quit\n>").strip().lower()
  return {"jokes_choice": user_input}

def reset_joke(state: JokeState) -> dict:
  "Clears the joke history without affecting the current one."
  return {"past_jokes": []}   #

def fetch_joke(state: JokeState) -> dict:
  "Pulls a joke from the pyjokes library and returns it"
  while True:

    joke_text = get_joke(language=state.language, category=state.category)
    new_joke = Joke(text=joke_text, category=state.category)
    if new_joke.text not in [j.text for j in state.past_jokes]:
      break
  print_joke(new_joke)
  return {
      "jokes": [new_joke],
      "past_jokes": state.past_jokes + [new_joke]
      }

def update_category(state: JokeState) -> dict:
  "Allows user to change the joke category"

  categories = ["neutral", "chuck", "all"]
  selection = int(input("Select category [0=neutral, 1=chuck, 2=all]: ").strip())
  return {"category": categories[selection]}

def update_language(state: JokeState) -> dict:
  "Allows user to select the language."

  languages = ["en", "de", "es"]
  selection = int(input("Select language choice [0=en, 1=de, 2=es]: ").strip())
  return {"language": languages[selection]}

def exit_bot(state: JokeState) -> dict:
  "When the user chooses to quit"

  return {"quit": True}

def route_choice(state: JokeState):
  "A router function to decide which node to go to next"

  if state.jokes_choice == "n":
    return "fetch_joke"
  elif state.jokes_choice == "c":
    return "update_category"
  elif state.jokes_choice == "r":
    return "reset_joke"
  elif state.jokes_choice == "l":
    return "update_language"
  elif state.jokes_choice == "q":
    return "exit_bot"
  return "exit_bot"  # Fallback route

"""You donâ€™t modify state in-place.

You just return `{field_name: new_value}`.

## 4. Create the Graph and Add Nodes + Edges
"""

from langgraph.graph import StateGraph, START, END

def build_joke_graph():  # No need for "CompiledStateGraph"
  "Define the structure of workflow and register all the nodes"

  workflow = StateGraph(JokeState)

  workflow.add_node("show_menu", show_menu)
  workflow.add_node("fetch_joke", fetch_joke)
  workflow.add_node("update_category", update_category)
  workflow.add_node("update_language", update_language)
  workflow.add_node("reset_joke", reset_joke)
  workflow.add_node("exit_bot", exit_bot)

  workflow.set_entry_point("show_menu")

  workflow.add_conditional_edges(
      "show_menu",
      route_choice,
      {
          "fetch_joke": "fetch_joke",
          "update_category": "update_category",
          "update_language": "update_language",
          "exit_bot": "exit_bot"
      }
  )

  workflow.add_edge("fetch_joke", "show_menu")
  workflow.add_edge("update_category", "show_menu")
  workflow.add_edge("update_language", "show_menu")
  workflow.add_edge("reset_joke", "show_menu")
  workflow.add_edge("exit_bot", END)

  return workflow.compile()

"""## 5. Run the Graph"""

def main():
  print("Welcome to AhmadTigress joke bot!")
  graph = build_joke_graph()
  print("Starting the session...now!")
  print("=" * 60)
  final_state = graph.invoke(JokeState(), config={"recursion_limit": 100})
  print("\n" + "+^" * 50)
  print("SESSION COMPLETE")
  print(
      f"You enjoyed {len(final_state.get('jokes', []))} joke(s) during the session"
      )
  print(f"Final Category: {final_state.get('category', 'unknown').upper()} ")
  print("Thanks for using my bot.")
  print("=" * 60 + "\n")


if __name__ == "__main__":
  main()

